/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef,useState, useEffect } from 'react'
import {  useThree,useFrame} from 'react-three-fiber'
import { useLoader } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'



export default function Model(props) {

  const group = useRef()
  const { viewport } = useThree();
  const { nodes, materials } = useLoader(GLTFLoader, '/assests/living_room.glb')
  const ref = useRef();
  const [isClicked, setClicked] = useState(false);
  const { camera } = useThree();
  //const { viewport } = useThree();
  const [hovered, setHover] = useState(false);
 
  function clickHandler() {
    if (ref.current) {
      setClicked(true);
    }
  }
  
  useEffect(() => {
    document.body.style.cursor = hovered
      ? "url('https://raw.githubusercontent.com/chenglou/react-motion/master/demos/demo8-draggable-list/cursor.png') 39 39, auto"
      : "grab"
    }, [hovered])

  useFrame(({ mouse }) => {
    camera.updateProjectionMatrix();
    if (isClicked) {
      const x = (mouse.x*6) ;
      const y = (mouse.y*2);
      const cameraPosition = camera.position;
      cameraPosition.set(x, y+1.7, -0.8);
    }
    setClicked(false);
  });

  return (
    <group  dispose={null} position={[0,0,0]} scale={[1,1,1]} >
      <mesh
        material={materials.TVCab_slab_mtl}
        geometry={nodes.tvCab_slab5.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TVCab_slab_mtl}
        geometry={nodes.tvCab_slab6.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TVCab_slab_mtl}
        geometry={nodes.tvCab_slab1.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TVCab_slab_mtl}
        geometry={nodes.tvCab_slab2.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TVCab_slab_mtl}
        geometry={nodes.tvCab_slab3.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TVCab_slab_mtl}
        geometry={nodes.tvCab_slab4.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TableCentre_mtl}
        geometry={nodes.table.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        position={[-0.95, 0, 0]}
      />
      <mesh
        material={materials.newMAT}
        geometry={nodes.Table_Glass.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Wall_mtl}
        geometry={nodes.Wall_2.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Wall_mtl}
        geometry={nodes.Wall_4.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Wall_mtl}
        geometry={nodes.CeilingFalse.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Wall_mtl}
        geometry={nodes.Ceiling.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
        <mesh material={materials.HorseBust_mtl} geometry={nodes['Mesh.008_0'].geometry} />
        <mesh material={materials.HorseFigurineBase_mtl} geometry={nodes['Mesh.008_1'].geometry} />
      </group>
      <mesh
        material={materials.HomePod_mtl}
        geometry={nodes.HomePod.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.HomeTheaterUnit_mtl}
        geometry={nodes.HomeTheaterUnit.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Canvas_Painting1_mtl}
        geometry={nodes.Canvas.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Remote_mtl}
        geometry={nodes.Remote.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
        <mesh material={materials.Lamp_mtl} geometry={nodes['Mesh.013_0'].geometry} />
        <mesh material={materials.SocketPoint_mtl} geometry={nodes['Mesh.013_1'].geometry} />
      </group>
      <mesh
        material={materials.backWall_mtl}
        geometry={nodes.Wall_3.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
       ref={ref}
        
        material={materials.Floor_mtl}
        geometry={nodes.new_Floor.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        onClick={clickHandler}
        onPointerOver={() => setHover(true)}
        onPointerOut={() => setHover(false)}
      />
      <mesh
        material={materials.PictureFrame_mtl}
        geometry={nodes.PictureFrame.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
        <mesh material={materials.wallDeco_mtl} geometry={nodes['Mesh.018_0'].geometry} />
        <mesh material={materials.TV_screen_mat} geometry={nodes['Mesh.018_1'].geometry} />
      </group>
      <mesh
        material={materials.TVcabSides_mtl}
        geometry={nodes.drawers_side_tvCab_slab2.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.TVcabSides_mtl}
        geometry={nodes.drawers_side_tvCab_slab1.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
        <mesh material={materials.SideTableTop_mtl} geometry={nodes['Mesh.020_0'].geometry} />
        <mesh material={materials.Chrome_mtl} geometry={nodes['Mesh.020_1'].geometry} />
      </group>
      <mesh
        material={materials.TVCab_wall_mtl}
        geometry={nodes.tvCab_backwall.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Door_mtl}
        geometry={nodes.door.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <mesh
        material={materials.Plastic_mtl}
        geometry={nodes.SlidingDoors_Base.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
        <mesh material={materials.lightFix_BlackPlastic} geometry={nodes['Mesh.031_0'].geometry} />
        <mesh material={materials['LightEmissive_mtl.001']} geometry={nodes['Mesh.031_1'].geometry} />
      </group>
      <mesh
        material={materials.lock_mtl}
        geometry={nodes.Lock.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
      <group position={[-2.73, 1.52, -0.37]} rotation={[Math.PI / 2, 0, 0]} scale={[0.41, 0.41, 0.41]}>
        <mesh material={materials.TV_mat} geometry={nodes['Mesh.002_0'].geometry} />
        <mesh material={materials.TV_screen_mat} geometry={nodes['Mesh.002_1'].geometry} />
      </group>
    </group>
  )
}
