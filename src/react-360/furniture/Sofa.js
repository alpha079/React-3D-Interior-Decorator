/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useMemo, useState } from 'react'
import { useLoader, useFrame, useThree } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'


export default function Model(props) {
  const group = useRef()
  const { nodes, materials } = useLoader(GLTFLoader, '/assests/sofa_type_1.glb')
  const texture = useMemo(() => new THREE.TextureLoader().load(props.url), [props.url])

  //for rotaion
  const {ref, ...rest} = props.hover();
  const [isClicked, setIsClicked]= useState(false);
  const {camera} = useThree();

  function clickHandler(e) {
    // console.log(e, ref);
    if (ref.current) {
      console.log(ref.current);
      // if(!isClicked)
      //   setIsClicked(true);
      // else setIsClicked(!isClicked);
      setIsClicked(!isClicked);
      const objectPosition = ref.current.position;
      const cameraPosition = camera.position;
 
      console.log({cameraPosition});
 
      cameraPosition.x = objectPosition.x - 1;
      cameraPosition.y = objectPosition.y + 1.5;
      cameraPosition.z = objectPosition.z+ 2.5;
 
      camera.lookAt(objectPosition);
    
    
  }
    
  
   
  }

  useFrame(() => {
    const objectPosition = ref.current.position;
    if (isClicked) {
      
      const sofaSpeed = 0.005;
      // if (camera.position.y < objectPosition.y + 3) {
      camera.position.x = camera.position.x * Math.cos(sofaSpeed) + camera.position.z * Math.sin(sofaSpeed);
    camera.position.z = camera.position.z * Math.cos(sofaSpeed) - camera.position.x * Math.sin(sofaSpeed) ;
      // }
      camera.lookAt(objectPosition);
     // setIsClicked(false);
    }
    else{
      camera.lookAt(objectPosition);
    }
  });
  


  return (
    <group ref={ref} {...rest} {...props} dispose={null}>
      <mesh material={materials.Sofa_mtl} geometry={nodes.sofa.geometry} position={props.position} rotation={props.rotation}  onClick={clickHandler}  >
        <meshStandardMaterial attach="material">
          <primitive attach="map" object={texture} />
        </meshStandardMaterial>
      </mesh>
    </group>
  )
}
